#summary Where our design documents for Assignment 2 go.
= Introduction =
In this lab, we implemented many different things. The bulk of the lab was spent implementing various system calls related to file I/O and processes. The remainder of the lab was designing and implementing a scheduler.

= System Calls =
== File I/O ==
For this part, we needed to implement a few things before we could implement the actual system calls - namely, file descriptors and a file descriptor table for each thread.
----
*File Descriptors* -
Our file descriptor design includes a few integral elements. Most importantly, it includes a pointer to a vnode struct, which represents the interface to a single file in the filesystem. It also includes integers which represent whether the file is readable or writable. Lastly, it includes a uio struct which represents the location in the file, and has a pointer to any data that is read from a file.
----
*File Descriptor table and FIDs* -
Each thread has a file descriptor table of fixed size, determined by the constant `MAX_FD`, which is contained in file.h, and represents the maximum number of handles a thread can have. The table is implemented as an array, and the handle is the index into the array. Each index can only be used once. The reason for this is because subsequent function calls may try to access a handle after it has been closed using the `close` function. Thus, the handle cannot be reallocated, and we decided to set the file descriptor's `vnode` to `NULL` in order to indicate the file is closed.
----
*Open/close* - use `vfs_open` and `vfs_close` to manipulate the `struct vnode`.

== Processes ==
For this part, we needed to implement a pid system to manage processes; waiting and exiting processes.
----
*PID System* -
The pid system is a `struct array` in thread.c where the index is the pid and the entry holds the parent's pid, thread's/process' pid, the exit code and if it has exited execution. Each thread will hold a copy of its pid table entry that holds the same info. `Getpid` uses the thread's pid entry to get the thread's pid. While, `waitpid` and `_exit` uses the global pid table to get their info.
----
= Scheduler =